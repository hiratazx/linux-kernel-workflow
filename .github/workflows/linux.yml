name: Linux Kernel Compiler

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch: # Allows manual triggering of the workflow from the GitHub UI
    inputs:
      kernel_source_repo:
        description: 'Git repository URL for the kernel source'
        required: true
        default: 'https://github.com/torvalds/linux.git' # Default kernel source
      branch:
        description: 'Branch of the kernel repository (leave empty for default branch)'
        required: false
        default: '' # Empty string means use the default branch of the repo

jobs:
  build:
    runs-on: ubuntu-latest # Using ubuntu-latest as a base for all builds
    strategy:
      fail-fast: false # Set to false to allow all matrix combinations to complete, even if one fails
      matrix:
        # Define the target packaging type.
        # "archlinux-compatible" will compile and install to a staging directory,
        # as full Arch package creation usually involves 'makepkg' on an Arch system.
        packaging_type:
          - 'debian-based'
          - 'rpm-based'
          - 'archlinux-compatible'

    steps:
    - name: Checkout GitHub Actions Workflow Repository
      uses: actions/checkout@v4
      # This checks out the repository containing your workflow file.

    - name: Set up kernel source directory and determine effective branch
      id: setup-source
      run: |
        # Use inputs from workflow_dispatch
        REPO_URL="${{ github.event.inputs.kernel_source_repo }}"
        BRANCH="${{ github.event.inputs.branch }}"
        TARGET_DIR="kernel-source"

        # Determine the effective branch name for caching and logging.
        # If 'branch' input is empty, use a placeholder for caching,
        # and let git clone handle the default branch.
        EFFECTIVE_BRANCH="$BRANCH"
        if [ -z "$BRANCH" ]; then
          echo "No specific branch provided. 'git clone' will fetch the default branch."
        else
          echo "Using specified branch: $EFFECTIVE_BRANCH"
        fi
        
        # Set outputs for subsequent steps to use
        echo "target_dir=$TARGET_DIR" >> "$GITHUB_OUTPUT"
        echo "effective_branch=$EFFECTIVE_BRANCH" >> "$GITHUB_OUTPUT"

    - name: Clone Kernel Source
      run: |
        REPO_URL="${{ github.event.inputs.kernel_source_repo }}"
        BRANCH="${{ github.event.inputs.branch }}"
        TARGET_DIR="${{ steps.setup-source.outputs.target_dir }}"

        echo "Checking if $TARGET_DIR exists and cleaning if necessary..."
        if [ -d "$TARGET_DIR" ]; then
          echo "$TARGET_DIR already exists. Removing its contents to ensure a clean clone."
          rm -rf "$TARGET_DIR"/* "$TARGET_DIR"/.* 2>/dev/null || true # Remove contents, ignore errors for hidden files
        fi
        mkdir -p "$TARGET_DIR" # Ensure the directory exists but is empty

        echo "Cloning $REPO_URL into $TARGET_DIR..."
        if [ -z "$BRANCH" ]; then
          # Clone without specifying branch to get the default branch
          git clone "$REPO_URL" "$TARGET_DIR"
        else
          # Clone a specific branch
          git clone -b "$BRANCH" "$REPO_URL" "$TARGET_DIR"
        fi
        cd "$TARGET_DIR"
        # Crucial for some kernel trees that use submodules (e.g., for firmware or tools)
        git submodule update --init --recursive

    - name: Install Build Dependencies (${{ matrix.packaging_type }})
      run: |
        echo "Installing build dependencies for ${{ matrix.packaging_type }}..."
        case "${{ matrix.packaging_type }}" in
          "debian-based")
            sudo apt-get update
            # Common kernel build dependencies for Debian/Ubuntu, including debhelper
            sudo apt-get install -y build-essential libncurses-dev flex bison libssl-dev libelf-dev dwarves bc rsync debhelper
            ;;
          "rpm-based")
            sudo apt-get update
            # Install common build tools and 'rpm' utility on Ubuntu. 'rpm' package provides rpmbuild.
            sudo apt-get install -y build-essential libncurses-dev flex bison libssl-dev libelf-dev dwarves bc rsync rpm fakeroot
            ;;
          "archlinux-compatible")
            sudo apt-get update
            # Common kernel build dependencies for Arch-like systems
            sudo apt-get install -y build-essential libncurses-dev flex bison libssl-dev libelf-dev dwarves bc rsync
            ;;
        esac

    - name: Clean Kernel Source
      run: |
        echo "Cleaning kernel source directory..."
        cd ${{ steps.setup-source.outputs.target_dir }}
        make mrproper # Cleans up any previous build artifacts and configuration

    - name: Configure Kernel
      run: |
        echo "Configuring kernel..."
        cd ${{ steps.setup-source.outputs.target_dir }}
        # If a .config file exists (e.g., from cache), update it with new options.
        # Otherwise, create a default configuration.
        if [ -f .config ]; then
          echo "Found existing .config. Updating with 'make olddefconfig'."
          make olddefconfig
        else
          echo "No existing .config found. Creating 'make defconfig'."
          make defconfig
        fi

    - name: Compile Kernel
      run: |
        echo "Compiling kernel (this may take a while, depending on kernel size and runner specs)..."
        cd ${{ steps.setup-source.outputs.target_dir }}
        # Use all available CPU cores for faster compilation
        make -j$(nproc)

    - name: Create Packages/Artifacts (${{ matrix.packaging_type }})
      run: |
        set -x # Enable debugging output for this step
        TARGET_DIR="${{ steps.setup-source.outputs.target_dir }}"
        mkdir -p artifacts/ # Create a directory to store the final artifacts
        echo "Creating artifacts for ${{ matrix.packaging_type }}..."
        cd "$TARGET_DIR"
        case "${{ matrix.packaging_type }}" in
          "debian-based")
            echo "Attempting to create Debian .deb packages..."
            # 'bindeb-pkg' creates generic Debian packages for image and headers
            make -j$(nproc) bindeb-pkg || { echo "make bindeb-pkg failed!"; exit 1; }
            # Move the generated .deb files from the parent directory to the artifacts directory
            mv ../*.deb ../artifacts/ || true # '|| true' prevents failure if no .deb files are found
            ;;
          "rpm-based")
            echo "Attempting to create RPM .rpm packages..."
            # Verify rpmbuild is available
            if ! command -v rpmbuild &> /dev/null
            then
                echo "rpmbuild command not found. Please ensure 'rpm' package is installed and provides rpmbuild."
                exit 1
            fi
            # Ensure the standard rpmbuild directory structure exists
            mkdir -p ~/rpmbuild/{BUILD,RPMS,SOURCES,SPECS,SRPMS}
            echo "Contents of ~/rpmbuild before build:"
            ls -lR ~/rpmbuild/
            # 'binrpm-pkg' creates generic RPM packages for image and headers
            make -j$(nproc) binrpm-pkg || { echo "make binrpm-pkg failed!"; exit 1; }
            echo "Contents of ~/rpmbuild/RPMS/x86_64/ after build:"
            ls -l ~/rpmbuild/RPMS/x86_64/ || true # Use || true in case directory doesn't exist yet
            
            echo "Contents of current directory (kernel source) after build:"
            ls -l *.rpm || true # Check for RPMs directly in the kernel source root
            ls -lR . # List all contents of the current directory

            echo "Contents of parent directory (workspace) after build:"
            ls -l ../*.rpm || true # Check for RPMs in the parent directory
            ls -lR ../ # List all contents of the parent directory

            # Attempt to move .rpm files from both standard rpmbuild location and parent directory
            find ~/rpmbuild/RPMS/x86_64/ -name "*.rpm" -exec mv {} ../artifacts/ \; || true
            find ../ -maxdepth 1 -name "*.rpm" -exec mv {} ../artifacts/ \; || true # Check parent directory
            find . -maxdepth 1 -name "*.rpm" -exec mv {} ../artifacts/ \; || true # Check current directory

            echo "Contents of artifacts/ after move attempts:"
            ls -l ../artifacts/
            ;;
          "archlinux-compatible")
            echo "Compiling for Arch Linux compatibility. Note: A full .pkg.tar.xz package typically requires a PKGBUILD and 'makepkg' on an Arch system."
            echo "This step will install the compiled kernel and its modules into a staging directory for inspection."
            mkdir -p ../artifacts/arch-install
            # Install kernel image and System.map
            make install INSTALL_PATH=../artifacts/arch-install || { echo "make install failed!"; exit 1; }
            # Install kernel modules
            make modules_install INSTALL_MOD_PATH=../artifacts/arch-install || { echo "make modules_install failed!"; exit 1; }
            ;;
        esac

    - name: Upload Kernel Artifacts
      uses: actions/upload-artifact@v4
      with:
        # Name the artifact uniquely based on run ID, packaging type, and effective branch
        name: kernel-artifacts-${{ github.run_id }}-${{ matrix.packaging_type }}-${{ steps.setup-source.outputs.effective_branch }}
        path: artifacts/ # Path to the directory containing the generated artifacts
        retention-days: 7 # Keep artifacts for 7 days
